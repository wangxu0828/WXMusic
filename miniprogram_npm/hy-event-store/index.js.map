{"version":3,"sources":["index.js","event-bus.js","event-store.js","utils.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;ACFA,ADGA;ACFA,ADGA;ACFA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["module.exports = {\r\n  HYEventBus: require('./event-bus'),\r\n  HYEventStore: require('./event-store')\r\n}\r\n","class HYEventBus {\r\n  constructor() {\r\n    this.eventBus = {}\r\n  }\r\n\r\n  on(eventName, eventCallback, thisArg) {\r\n    if (typeof eventName !== \"string\") {\r\n      throw new TypeError(\"the event name must be string type\")\r\n    }\r\n\r\n    if (typeof eventCallback !== \"function\") {\r\n      throw new TypeError(\"the event callback must be function type\")\r\n    }\r\n    \r\n    let hanlders = this.eventBus[eventName]\r\n    if (!hanlders) {\r\n      hanlders = []\r\n      this.eventBus[eventName] = hanlders\r\n    }\r\n\r\n    hanlders.push({\r\n      eventCallback,\r\n      thisArg\r\n    })\r\n    return this\r\n  }\r\n\r\n  once(eventName, eventCallback, thisArg) {\r\n    if (typeof eventName !== \"string\") {\r\n      throw new TypeError(\"the event name must be string type\")\r\n    }\r\n\r\n    if (typeof eventCallback !== \"function\") {\r\n      throw new TypeError(\"the event callback must be function type\")\r\n    }\r\n    \r\n    const tempCallback = (...payload) => {\r\n      this.off(eventName, tempCallback)\r\n      eventCallback.apply(thisArg, payload)\r\n    }\r\n\r\n    return this.on(eventName, tempCallback, thisArg)\r\n  }\r\n\r\n  emit(eventName, ...payload) {\r\n    if (typeof eventName !== \"string\") {\r\n      throw new TypeError(\"the event name must be string type\")\r\n    }\r\n\r\n    const handlers = this.eventBus[eventName] || []\r\n    handlers.forEach(handler => {\r\n      handler.eventCallback.apply(handler.thisArg, payload)\r\n    })\r\n    return this\r\n  }\r\n\r\n  off(eventName, eventCallback) {\r\n    if (typeof eventName !== \"string\") {\r\n      throw new TypeError(\"the event name must be string type\")\r\n    }\r\n\r\n    if (typeof eventCallback !== \"function\") {\r\n      throw new TypeError(\"the event callback must be function type\")\r\n    }\r\n\r\n    const handlers = this.eventBus[eventName]\r\n    if (handlers && eventCallback) {\r\n      const newHandlers = [...handlers]\r\n      for (let i = 0; i < newHandlers.length; i++) {\r\n        const handler = newHandlers[i]\r\n        if (handler.eventCallback === eventCallback) {\r\n          const index = handlers.indexOf(handler)\r\n          handlers.splice(index, 1)\r\n        }\r\n      }\r\n    }\r\n\r\n    if (handlers.length === 0) {\r\n      delete this.eventBus[eventName]\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = HYEventBus\r\n","const EventBus = require(\"./event-bus\")\r\nconst { isObject } = require('./utils')\r\n\r\nclass HYEventStore {\r\n  constructor(options) {\r\n    if (!isObject(options.state)) {\r\n      throw new TypeError(\"the state must be object type\")\r\n    }\r\n    if (options.actions && isObject(options.actions)) {\r\n      const values = Object.values(options.actions)\r\n      for (const value of values) {\r\n        if (typeof value !== \"function\") {\r\n          throw new TypeError(\"the value of actions must be a function\")\r\n        }\r\n      }\r\n      this.actions = options.actions\r\n    }\r\n    this.state = options.state\r\n    this._observe(options.state)\r\n    this.event = new EventBus()\r\n    this.eventV2 = new EventBus()\r\n  }\r\n\r\n  _observe(state) {\r\n    const _this = this\r\n    Object.keys(state).forEach(key => {\r\n      let _value = state[key]\r\n      Object.defineProperty(state, key, {\r\n        get: function() {\r\n          return _value\r\n        },\r\n        set: function(newValue) {\r\n          if (_value === newValue) return\r\n          _value = newValue\r\n          _this.event.emit(key, _value)\r\n          _this.eventV2.emit(key, { [key]: _value })\r\n        }\r\n      })\r\n    })\r\n  }\r\n\r\n  onState(stateKey, stateCallback) {\r\n    const keys = Object.keys(this.state)\r\n    if (keys.indexOf(stateKey) === -1) {\r\n      throw new Error(\"the state does not contain your key\")\r\n    }\r\n    this.event.on(stateKey, stateCallback)\r\n\r\n    // callback\r\n    if (typeof stateCallback !== \"function\") {\r\n      throw new TypeError(\"the event callback must be function type\")\r\n    }\r\n    const value = this.state[stateKey]\r\n    stateCallback.apply(this.state, [value])\r\n  }\r\n\r\n  // [\"name\", \"age\"] callback1\r\n  // [\"name\", \"height\"] callback2\r\n\r\n  onStates(statekeys, stateCallback) {\r\n    const keys = Object.keys(this.state)\r\n    const value = {}\r\n    for (const theKey of statekeys) {\r\n      if (keys.indexOf(theKey) === -1) {\r\n        throw new Error(\"the state does not contain your key\")\r\n      }\r\n      this.eventV2.on(theKey, stateCallback)\r\n      value[theKey] = this.state[theKey]\r\n    }\r\n\r\n    stateCallback.apply(this.state, [value])\r\n  }\r\n\r\n  offStates(stateKeys, stateCallback) {\r\n    stateKeys.forEach(theKey => {\r\n      if (keys.indexOf(stateKey) === -1) {\r\n        throw new Error(\"the state does not contain your key\")\r\n      }\r\n      this.eventV2.off(theKey, stateCallback)\r\n    })\r\n  }\r\n\r\n  offState(stateKey, stateCallback) {\r\n    const keys = Object.keys(this.state)\r\n    if (keys.indexOf(stateKey) === -1) {\r\n      throw new Error(\"the state does not contain your key\")\r\n    }\r\n    this.event.off(stateKey, stateCallback)\r\n  }\r\n\r\n  setState(stateKey, stateValue) {\r\n    this.state[stateKey] = stateValue\r\n  }\r\n\r\n  dispatch(actionName, ...args) {\r\n    if (typeof actionName !== \"string\") {\r\n      throw new TypeError(\"the action name must be string type\")\r\n    }\r\n    if (Object.keys(this.actions).indexOf(actionName) === -1) {\r\n      throw new Error(\"this action name does not exist, please check it\")\r\n    }\r\n    const actionFn = this.actions[actionName]\r\n    actionFn.apply(this, [this.state, ...args])\r\n  }\r\n}\r\n\r\nmodule.exports = HYEventStore\r\n","function isObject(obj) {\r\n  var type = typeof obj;\r\n  return type === 'object' && !!obj;\r\n}\r\n\r\nmodule.exports = {\r\n  isObject\r\n}"]}